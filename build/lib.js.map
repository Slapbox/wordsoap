{"version":3,"sources":["/Users/raine/projects/wordsoap/src/lib.js"],"names":["_$14290","require","regexes$14291","deadAttributes","source","nbsp","conditional","htmlComments","deadTags","deadTagsAndContent","regexesCompiled$14294","mapValues","a$14298","RegExp","clean$14297","a$14299","replace","module","exports","regexes","regexesCompiled"],"mappings":"AAAA;AAEA,IAAIA,OAAA,GAAIC,OAAA,CAAQ,QAAR,CAAR,CAFA;AAIA,IAAIC,aAAA,GAAU;AAAA,IAGbC;AAAAA,kBAAA,E,kHAAkIC,MAHrH;AAAA,IAKbC,IAAA,E,sCAA4CD,MAL/B;AAAA,IAQbE;AAAAA,eAAA,E,wCAAqDF,MARxC;AAAA,IAUbG,YAAA,E,YAA0BH,MAVb;AAAA,IAYbI,QAAA,E,+BAAyCJ,MAZ5B;AAAA,IAcbK,kBAAA,E,oCAAwDL,MAd3C;AAAA,CAAd,CAJA;AAuBA,IAAIM;AAAAA,qBAAA,GAAkBV,OAAA,CAAEW,SAAF,CAAYT,aAAZ,EAWJ,UAAAU,OAAA;AAAA,IAX2B,WAAIC,MAAJ,CAW3BD,OAX2B,EAAc,IAAd,EAW3B;AAAA,CAXI,CAAtB,CAvBA;AAyBA,IAAIE,WAAA,GAoEA,UAASC,OAAT,EAAY;AAAA,IAAE,OAAOA,OAAA,CAlEtBC,OAkEsB,CAlEdN,qBAAA,CAAgBP,cAkEF,EAlEkB,EAkElB,EAjEtBa,OAiEsB,CAjEdN,qBAAA,CAAgBL,IAiEF,EAjEQ,EAiER,EAhEtBW,OAgEsB,CAhEdN,qBAAA,CAAgBJ,WAgEF,EAhEe,EAgEf,EA/DtBU,OA+DsB,CA/DdN,qBAAA,CAAgBH,YA+DF,EA/DgB,EA+DhB,EA9DtBS,OA8DsB,CA9DdN,qBAAA,CAAgBF,QA8DF,EA9DY,EA8DZ,EA7DtBQ,OA6DsB,CA7DdN,qBAAA,CAAgBD,kBA6DF,EA7DsB,EA6DtB,EA5DtBO,OA4DsB,CA5Dd,IAAIH,MAAJ,CAAW,QAAX,EAAqB,IAArB,CA4Dc,EA5Dc,GA4Dd,CAAP,CAAF;AAAA,CApEhB,CAzBA;AAmCA;AAAAI,MAAA,CAAOC,OAAP,GAAiBJ,WAAjB,CAnCA;AAoCAG,MAAA,CAAOC,OAAP,CAAeC,OAAf,GAAyBjB,aAAzB,CApCA;AAqCAe,MAAA,CAAOC,OAAP,CAAeE,eAAf,GAAiCV,qBAAjC","file":"lib.js","sourcesContent":["'use strict'\n\nvar _ = require('lodash')\n\nvar regexes = {\n\t// Inspired by: http://tim.mackey.ie/2005/11/23/CleanWordHTMLUsingRegularExpressions.aspx\n\n\tdeadAttributes: /(?:\\s+(?:class|lang|style|size|face|link|vlink|align|xmlns(?::\\w+|[ovwxp\\w+])?))=(?:'[^']*'|\"\"[^\"\"]*\"\"|[^\\s>]+)/.source,\n\n\tnbsp: /(<[^\\s>]*>&nbsp;<\\/[^\\s>]*>)|&nbsp;/.source,\n\n\t// https://regex101.com/r/sD4vJ8\n\tconditional: /<!-*\\[\\w+ [^\\]]*]>|<!\\[end[^\\]]*\\]-*>/.source,\n\n\thtmlComments: /<!--.*-->/.source,\n\n\tdeadTags: /<\\/?(span|[ovwxp]:\\w+)[^>]*>/.source,\n\n\tdeadTagsAndContent: /<(xml|head)>[\\S\\s]*<\\/(xml|head)>/.source,\n\n}\n\n// compile the regexes\nvar regexesCompiled = _.mapValues(regexes, λ[new RegExp(#, 'gi')])\n\nvar clean = λ\n\t\t// .replace(new RegExp(r.msoTags, 'gi'), '')\n\t\t.replace(regexesCompiled.deadAttributes, '')\n\t\t.replace(regexesCompiled.nbsp, '')\n\t\t.replace(regexesCompiled.conditional, '')\n\t\t.replace(regexesCompiled.htmlComments, '')\n\t\t.replace(regexesCompiled.deadTags, '')\n\t\t.replace(regexesCompiled.deadTagsAndContent, '')\n\t\t.replace(new RegExp('&quot;', 'gi'), '\"') // regex literals break sweetjs here\n\nmodule.exports = clean\nmodule.exports.regexes = regexes\nmodule.exports.regexesCompiled = regexesCompiled\n"],"sourceRoot":"/source/"}